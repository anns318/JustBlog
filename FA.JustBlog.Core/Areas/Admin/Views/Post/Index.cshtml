@using FA.JustBlog.Core.PaginateList
@using NonFactors.Mvc.Grid
@model PaginatedList<FA.JustBlog.Core.Models.Post>

@{
    ViewData["Title"] = "Index";
    var filtering = ViewData["filtering"];
    var sortBy = ViewBag.sortBy;
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>   
</p>
<form method="get" asp-action="Index" id="formSetPageSize">
    <select onchange="setPageSize(this)" id="pageSizeSelect" name="pageSize">

        <option value="2">2</option>
        <option value="3">3</option>
        <option value="5">5</option>
        <option value="10">10</option>
    </select>
    @(sortBy != null ? Html.Raw($"<input hidden name='sortBy' value='{sortBy}' />") : "")
    @(filtering != null ? Html.Raw($"<input hidden name='filtering' value='{filtering}' />") : "")
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.TObject.Title)
            </th>
            @* <th>
            @Html.DisplayNameFor(model => model.TObject.Content)
            </th> *@
            <th>
                @Html.DisplayNameFor(model => model.TObject.View)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TObject.Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TObject.CreatedDate)
            </th>
            <th class="text-center">
                @Html.DisplayNameFor(model => model.TObject.IsPublished)
            </th>
            <th class="text-center">
                @Html.DisplayNameFor(model => model.TObject.PostRate)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Count == 0)
        {
            <p>Don't have any data for this page</p>
        }
        else
        {
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    @* <td>
            @Html.DisplayFor(modelItem => item.Content)
            </td> *@
                    <td>
                        @Html.DisplayFor(modelItem => item.View)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CreatedDate)
                    </td>
                    <td class="text-center">
                        @Html.DisplayFor(modelItem => item.IsPublished)
                    </td>
                   
                    @{
                        var postRate = (from x in item.PostRate
                                        group x by x.PostId into g
                                        select new
                                        {
                                            rate = g.Average(r => r.Rate)
                                        }).FirstOrDefault();
                                            <td class="text-center">@(postRate?.rate == null ? 0 : postRate.rate)</td>
                    }
                    
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
            }

        }
    </tbody>

</table>
<a class="btn btn-primary @(Model.HasPreviousPage ? "" : "disabled")" asp-route-pageSize="@ViewBag.PageSize" asp-route-filtering="@(ViewData["filtering"])" asp-route-sortBy="@(ViewData["sortBy"])" asp-route-page="@(Model.PageIndex - 1)">Previous</a>
@{
    for(int i =1; i <= Model.TotalPages; i++)
    {
                <a class="btn btn-primary @(Model.PageIndex == i ? "active" : "")" asp-route-pageSize="@ViewBag.PageSize" asp-route-filtering="@(ViewData["filtering"])" asp-route-sortBy="@(ViewData["sortBy"])" asp-route-page="@i">@i</a>
    }
}

<a class="btn btn-primary @(Model.HasNextPage ? "" : "disabled")" asp-route-pageSize = "@ViewBag.PageSize" asp-route-filtering="@(ViewData["filtering"])" asp-route-sortBy="@(ViewData["sortBy"])" asp-route-page="@(Model.PageIndex + 1)">Next</a>


@section Scripts{
    <script>
        function setPageSize(e) {
            $("#formSetPageSize").submit();
        }
        console.log(@ViewBag.PageSize )
        if (@ViewBag.PageSize != null) {
            $("#pageSizeSelect").val(@ViewBag.PageSize)

        } 
      
    </script>
}